// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dmlc {
namespace linear {

namespace {

const ::google::protobuf::Descriptor* Config_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Config_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_Loss_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Config_Algo_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_config_2eproto() {
  protobuf_AddDesc_config_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "config.proto");
  GOOGLE_CHECK(file != NULL);
  Config_descriptor_ = file->message_type(0);
  static const int Config_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, train_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, val_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, data_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, model_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, model_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, predict_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, loss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, lambda_l1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, lambda_l2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, algo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, minibatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, max_data_pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, lr_eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, save_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, load_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, local_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, num_parts_per_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, rand_shuffle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, neg_sampling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, prob_predict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, dropout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, print_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, lr_beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, num_threads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, max_concurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, key_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, msg_compression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, fixed_bytes_),
  };
  Config_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Config_descriptor_,
      Config::default_instance_,
      Config_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Config));
  Config_Loss_descriptor_ = Config_descriptor_->enum_type(0);
  Config_Algo_descriptor_ = Config_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_config_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Config_descriptor_, &Config::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_config_2eproto() {
  delete Config::default_instance_;
  delete Config_reflection_;
  delete Config::_default_data_format_;
}

void protobuf_AddDesc_config_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014config.proto\022\013dmlc.linear\"\253\006\n\006Config\022\022"
    "\n\ntrain_data\030\001 \001(\t\022\020\n\010val_data\030\002 \001(\t\022\033\n\013"
    "data_format\030\004 \001(\t:\006libsvm\022\021\n\tmodel_out\030\005"
    " \001(\t\022\020\n\010model_in\030\007 \001(\t\022\023\n\013predict_out\030\t "
    "\001(\t\022-\n\004loss\030\013 \001(\0162\030.dmlc.linear.Config.L"
    "oss:\005LOGIT\022\024\n\tlambda_l1\030\014 \001(\002:\0011\022\024\n\tlamb"
    "da_l2\030\r \001(\002:\0010\022,\n\004algo\030\025 \001(\0162\030.dmlc.line"
    "ar.Config.Algo:\004FTRL\022\027\n\tminibatch\030\026 \001(\005:"
    "\0041000\022\031\n\rmax_data_pass\030\027 \001(\005:\00210\022\024\n\006lr_e"
    "ta\030\030 \001(\002:\0040.01\022\025\n\tsave_iter\030\006 \001(\005:\002-1\022\025\n"
    "\tload_iter\030\010 \001(\005:\002-1\022\031\n\nlocal_data\030e \001(\010"
    ":\005false\022\036\n\022num_parts_per_file\030f \001(\005:\00210\022"
    "\030\n\014rand_shuffle\030g \001(\005:\00210\022\027\n\014neg_samplin"
    "g\030h \001(\002:\0011\022\032\n\014prob_predict\030i \001(\010:\004true\022\022"
    "\n\007dropout\030n \001(\002:\0010\022\024\n\tprint_sec\030o \001(\002:\0011"
    "\022\022\n\007lr_beta\030p \001(\002:\0011\022\026\n\013num_threads\030y \001("
    "\005:\0012\022\032\n\017max_concurrency\030z \001(\005:\0012\022\027\n\tkey_"
    "cache\030{ \001(\010:\004true\022\035\n\017msg_compression\030| \001"
    "(\010:\004true\022\026\n\013fixed_bytes\030} \001(\005:\0010\"/\n\004Loss"
    "\022\n\n\006SQUARE\020\001\022\t\n\005LOGIT\020\002\022\020\n\014SQUARE_HINGE\020"
    "\004\"&\n\004Algo\022\007\n\003SGD\020\001\022\013\n\007ADAGRAD\020\002\022\010\n\004FTRL\020"
    "\003", 841);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "config.proto", &protobuf_RegisterTypes);
  Config::_default_data_format_ =
      new ::std::string("libsvm", 6);
  Config::default_instance_ = new Config();
  Config::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_config_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_config_2eproto {
  StaticDescriptorInitializer_config_2eproto() {
    protobuf_AddDesc_config_2eproto();
  }
} static_descriptor_initializer_config_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Config_Loss_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_Loss_descriptor_;
}
bool Config_Loss_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_Loss Config::SQUARE;
const Config_Loss Config::LOGIT;
const Config_Loss Config::SQUARE_HINGE;
const Config_Loss Config::Loss_MIN;
const Config_Loss Config::Loss_MAX;
const int Config::Loss_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Config_Algo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_Algo_descriptor_;
}
bool Config_Algo_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Config_Algo Config::SGD;
const Config_Algo Config::ADAGRAD;
const Config_Algo Config::FTRL;
const Config_Algo Config::Algo_MIN;
const Config_Algo Config::Algo_MAX;
const int Config::Algo_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* Config::_default_data_format_ = NULL;
#ifndef _MSC_VER
const int Config::kTrainDataFieldNumber;
const int Config::kValDataFieldNumber;
const int Config::kDataFormatFieldNumber;
const int Config::kModelOutFieldNumber;
const int Config::kModelInFieldNumber;
const int Config::kPredictOutFieldNumber;
const int Config::kLossFieldNumber;
const int Config::kLambdaL1FieldNumber;
const int Config::kLambdaL2FieldNumber;
const int Config::kAlgoFieldNumber;
const int Config::kMinibatchFieldNumber;
const int Config::kMaxDataPassFieldNumber;
const int Config::kLrEtaFieldNumber;
const int Config::kSaveIterFieldNumber;
const int Config::kLoadIterFieldNumber;
const int Config::kLocalDataFieldNumber;
const int Config::kNumPartsPerFileFieldNumber;
const int Config::kRandShuffleFieldNumber;
const int Config::kNegSamplingFieldNumber;
const int Config::kProbPredictFieldNumber;
const int Config::kDropoutFieldNumber;
const int Config::kPrintSecFieldNumber;
const int Config::kLrBetaFieldNumber;
const int Config::kNumThreadsFieldNumber;
const int Config::kMaxConcurrencyFieldNumber;
const int Config::kKeyCacheFieldNumber;
const int Config::kMsgCompressionFieldNumber;
const int Config::kFixedBytesFieldNumber;
#endif  // !_MSC_VER

Config::Config()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Config::InitAsDefaultInstance() {
}

Config::Config(const Config& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  train_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_format_ = const_cast< ::std::string*>(_default_data_format_);
  model_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_in_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  predict_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loss_ = 2;
  lambda_l1_ = 1;
  lambda_l2_ = 0;
  algo_ = 3;
  minibatch_ = 1000;
  max_data_pass_ = 10;
  lr_eta_ = 0.01f;
  save_iter_ = -1;
  load_iter_ = -1;
  local_data_ = false;
  num_parts_per_file_ = 10;
  rand_shuffle_ = 10;
  neg_sampling_ = 1;
  prob_predict_ = true;
  dropout_ = 0;
  print_sec_ = 1;
  lr_beta_ = 1;
  num_threads_ = 2;
  max_concurrency_ = 2;
  key_cache_ = true;
  msg_compression_ = true;
  fixed_bytes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Config::~Config() {
  SharedDtor();
}

void Config::SharedDtor() {
  if (train_data_ != &::google::protobuf::internal::kEmptyString) {
    delete train_data_;
  }
  if (val_data_ != &::google::protobuf::internal::kEmptyString) {
    delete val_data_;
  }
  if (data_format_ != _default_data_format_) {
    delete data_format_;
  }
  if (model_out_ != &::google::protobuf::internal::kEmptyString) {
    delete model_out_;
  }
  if (model_in_ != &::google::protobuf::internal::kEmptyString) {
    delete model_in_;
  }
  if (predict_out_ != &::google::protobuf::internal::kEmptyString) {
    delete predict_out_;
  }
  if (this != default_instance_) {
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Config_descriptor_;
}

const Config& Config::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_config_2eproto();
  return *default_instance_;
}

Config* Config::default_instance_ = NULL;

Config* Config::New() const {
  return new Config;
}

void Config::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_train_data()) {
      if (train_data_ != &::google::protobuf::internal::kEmptyString) {
        train_data_->clear();
      }
    }
    if (has_val_data()) {
      if (val_data_ != &::google::protobuf::internal::kEmptyString) {
        val_data_->clear();
      }
    }
    if (has_data_format()) {
      if (data_format_ != _default_data_format_) {
        data_format_->assign(*_default_data_format_);
      }
    }
    if (has_model_out()) {
      if (model_out_ != &::google::protobuf::internal::kEmptyString) {
        model_out_->clear();
      }
    }
    if (has_model_in()) {
      if (model_in_ != &::google::protobuf::internal::kEmptyString) {
        model_in_->clear();
      }
    }
    if (has_predict_out()) {
      if (predict_out_ != &::google::protobuf::internal::kEmptyString) {
        predict_out_->clear();
      }
    }
    loss_ = 2;
    lambda_l1_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lambda_l2_ = 0;
    algo_ = 3;
    minibatch_ = 1000;
    max_data_pass_ = 10;
    lr_eta_ = 0.01f;
    save_iter_ = -1;
    load_iter_ = -1;
    local_data_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    num_parts_per_file_ = 10;
    rand_shuffle_ = 10;
    neg_sampling_ = 1;
    prob_predict_ = true;
    dropout_ = 0;
    print_sec_ = 1;
    lr_beta_ = 1;
    num_threads_ = 2;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    max_concurrency_ = 2;
    key_cache_ = true;
    msg_compression_ = true;
    fixed_bytes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string train_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->train_data().data(), this->train_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val_data;
        break;
      }

      // optional string val_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val_data().data(), this->val_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data_format;
        break;
      }

      // optional string data_format = 4 [default = "libsvm"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_format().data(), this->data_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_model_out;
        break;
      }

      // optional string model_out = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_out().data(), this->model_out().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_save_iter;
        break;
      }

      // optional int32 save_iter = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &save_iter_)));
          set_has_save_iter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_model_in;
        break;
      }

      // optional string model_in = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model_in:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model_in().data(), this->model_in().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_load_iter;
        break;
      }

      // optional int32 load_iter = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_load_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &load_iter_)));
          set_has_load_iter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_predict_out;
        break;
      }

      // optional string predict_out = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_predict_out:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->predict_out().data(), this->predict_out().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_loss;
        break;
      }

      // optional .dmlc.linear.Config.Loss loss = 11 [default = LOGIT];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loss:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dmlc::linear::Config_Loss_IsValid(value)) {
            set_loss(static_cast< ::dmlc::linear::Config_Loss >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_lambda_l1;
        break;
      }

      // optional float lambda_l1 = 12 [default = 1];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lambda_l1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lambda_l1_)));
          set_has_lambda_l1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_lambda_l2;
        break;
      }

      // optional float lambda_l2 = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lambda_l2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lambda_l2_)));
          set_has_lambda_l2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_algo;
        break;
      }

      // optional .dmlc.linear.Config.Algo algo = 21 [default = FTRL];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algo:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dmlc::linear::Config_Algo_IsValid(value)) {
            set_algo(static_cast< ::dmlc::linear::Config_Algo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_minibatch;
        break;
      }

      // optional int32 minibatch = 22 [default = 1000];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minibatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minibatch_)));
          set_has_minibatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_max_data_pass;
        break;
      }

      // optional int32 max_data_pass = 23 [default = 10];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_data_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_data_pass_)));
          set_has_max_data_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_lr_eta;
        break;
      }

      // optional float lr_eta = 24 [default = 0.01];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lr_eta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_eta_)));
          set_has_lr_eta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(808)) goto parse_local_data;
        break;
      }

      // optional bool local_data = 101 [default = false];
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &local_data_)));
          set_has_local_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(816)) goto parse_num_parts_per_file;
        break;
      }

      // optional int32 num_parts_per_file = 102 [default = 10];
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_parts_per_file:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_parts_per_file_)));
          set_has_num_parts_per_file();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(824)) goto parse_rand_shuffle;
        break;
      }

      // optional int32 rand_shuffle = 103 [default = 10];
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand_shuffle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rand_shuffle_)));
          set_has_rand_shuffle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(837)) goto parse_neg_sampling;
        break;
      }

      // optional float neg_sampling = 104 [default = 1];
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_neg_sampling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neg_sampling_)));
          set_has_neg_sampling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(840)) goto parse_prob_predict;
        break;
      }

      // optional bool prob_predict = 105 [default = true];
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prob_predict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prob_predict_)));
          set_has_prob_predict();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(885)) goto parse_dropout;
        break;
      }

      // optional float dropout = 110 [default = 0];
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dropout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropout_)));
          set_has_dropout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(893)) goto parse_print_sec;
        break;
      }

      // optional float print_sec = 111 [default = 1];
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_print_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &print_sec_)));
          set_has_print_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(901)) goto parse_lr_beta;
        break;
      }

      // optional float lr_beta = 112 [default = 1];
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lr_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_beta_)));
          set_has_lr_beta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(968)) goto parse_num_threads;
        break;
      }

      // optional int32 num_threads = 121 [default = 2];
      case 121: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_threads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_threads_)));
          set_has_num_threads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(976)) goto parse_max_concurrency;
        break;
      }

      // optional int32 max_concurrency = 122 [default = 2];
      case 122: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_concurrency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_concurrency_)));
          set_has_max_concurrency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(984)) goto parse_key_cache;
        break;
      }

      // optional bool key_cache = 123 [default = true];
      case 123: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_cache_)));
          set_has_key_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(992)) goto parse_msg_compression;
        break;
      }

      // optional bool msg_compression = 124 [default = true];
      case 124: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_compression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &msg_compression_)));
          set_has_msg_compression();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1000)) goto parse_fixed_bytes;
        break;
      }

      // optional int32 fixed_bytes = 125 [default = 0];
      case 125: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fixed_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixed_bytes_)));
          set_has_fixed_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string train_data = 1;
  if (has_train_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_data().data(), this->train_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->train_data(), output);
  }

  // optional string val_data = 2;
  if (has_val_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val_data().data(), this->val_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->val_data(), output);
  }

  // optional string data_format = 4 [default = "libsvm"];
  if (has_data_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_format().data(), this->data_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->data_format(), output);
  }

  // optional string model_out = 5;
  if (has_model_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_out().data(), this->model_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->model_out(), output);
  }

  // optional int32 save_iter = 6 [default = -1];
  if (has_save_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->save_iter(), output);
  }

  // optional string model_in = 7;
  if (has_model_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_in().data(), this->model_in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->model_in(), output);
  }

  // optional int32 load_iter = 8 [default = -1];
  if (has_load_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->load_iter(), output);
  }

  // optional string predict_out = 9;
  if (has_predict_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predict_out().data(), this->predict_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->predict_out(), output);
  }

  // optional .dmlc.linear.Config.Loss loss = 11 [default = LOGIT];
  if (has_loss()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->loss(), output);
  }

  // optional float lambda_l1 = 12 [default = 1];
  if (has_lambda_l1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->lambda_l1(), output);
  }

  // optional float lambda_l2 = 13 [default = 0];
  if (has_lambda_l2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->lambda_l2(), output);
  }

  // optional .dmlc.linear.Config.Algo algo = 21 [default = FTRL];
  if (has_algo()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->algo(), output);
  }

  // optional int32 minibatch = 22 [default = 1000];
  if (has_minibatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->minibatch(), output);
  }

  // optional int32 max_data_pass = 23 [default = 10];
  if (has_max_data_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->max_data_pass(), output);
  }

  // optional float lr_eta = 24 [default = 0.01];
  if (has_lr_eta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->lr_eta(), output);
  }

  // optional bool local_data = 101 [default = false];
  if (has_local_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->local_data(), output);
  }

  // optional int32 num_parts_per_file = 102 [default = 10];
  if (has_num_parts_per_file()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(102, this->num_parts_per_file(), output);
  }

  // optional int32 rand_shuffle = 103 [default = 10];
  if (has_rand_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(103, this->rand_shuffle(), output);
  }

  // optional float neg_sampling = 104 [default = 1];
  if (has_neg_sampling()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(104, this->neg_sampling(), output);
  }

  // optional bool prob_predict = 105 [default = true];
  if (has_prob_predict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(105, this->prob_predict(), output);
  }

  // optional float dropout = 110 [default = 0];
  if (has_dropout()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(110, this->dropout(), output);
  }

  // optional float print_sec = 111 [default = 1];
  if (has_print_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(111, this->print_sec(), output);
  }

  // optional float lr_beta = 112 [default = 1];
  if (has_lr_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(112, this->lr_beta(), output);
  }

  // optional int32 num_threads = 121 [default = 2];
  if (has_num_threads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(121, this->num_threads(), output);
  }

  // optional int32 max_concurrency = 122 [default = 2];
  if (has_max_concurrency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(122, this->max_concurrency(), output);
  }

  // optional bool key_cache = 123 [default = true];
  if (has_key_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(123, this->key_cache(), output);
  }

  // optional bool msg_compression = 124 [default = true];
  if (has_msg_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(124, this->msg_compression(), output);
  }

  // optional int32 fixed_bytes = 125 [default = 0];
  if (has_fixed_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(125, this->fixed_bytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Config::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string train_data = 1;
  if (has_train_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_data().data(), this->train_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->train_data(), target);
  }

  // optional string val_data = 2;
  if (has_val_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val_data().data(), this->val_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val_data(), target);
  }

  // optional string data_format = 4 [default = "libsvm"];
  if (has_data_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_format().data(), this->data_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data_format(), target);
  }

  // optional string model_out = 5;
  if (has_model_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_out().data(), this->model_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->model_out(), target);
  }

  // optional int32 save_iter = 6 [default = -1];
  if (has_save_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->save_iter(), target);
  }

  // optional string model_in = 7;
  if (has_model_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model_in().data(), this->model_in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->model_in(), target);
  }

  // optional int32 load_iter = 8 [default = -1];
  if (has_load_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->load_iter(), target);
  }

  // optional string predict_out = 9;
  if (has_predict_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predict_out().data(), this->predict_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->predict_out(), target);
  }

  // optional .dmlc.linear.Config.Loss loss = 11 [default = LOGIT];
  if (has_loss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->loss(), target);
  }

  // optional float lambda_l1 = 12 [default = 1];
  if (has_lambda_l1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->lambda_l1(), target);
  }

  // optional float lambda_l2 = 13 [default = 0];
  if (has_lambda_l2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->lambda_l2(), target);
  }

  // optional .dmlc.linear.Config.Algo algo = 21 [default = FTRL];
  if (has_algo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->algo(), target);
  }

  // optional int32 minibatch = 22 [default = 1000];
  if (has_minibatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->minibatch(), target);
  }

  // optional int32 max_data_pass = 23 [default = 10];
  if (has_max_data_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->max_data_pass(), target);
  }

  // optional float lr_eta = 24 [default = 0.01];
  if (has_lr_eta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->lr_eta(), target);
  }

  // optional bool local_data = 101 [default = false];
  if (has_local_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->local_data(), target);
  }

  // optional int32 num_parts_per_file = 102 [default = 10];
  if (has_num_parts_per_file()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(102, this->num_parts_per_file(), target);
  }

  // optional int32 rand_shuffle = 103 [default = 10];
  if (has_rand_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(103, this->rand_shuffle(), target);
  }

  // optional float neg_sampling = 104 [default = 1];
  if (has_neg_sampling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(104, this->neg_sampling(), target);
  }

  // optional bool prob_predict = 105 [default = true];
  if (has_prob_predict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(105, this->prob_predict(), target);
  }

  // optional float dropout = 110 [default = 0];
  if (has_dropout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(110, this->dropout(), target);
  }

  // optional float print_sec = 111 [default = 1];
  if (has_print_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(111, this->print_sec(), target);
  }

  // optional float lr_beta = 112 [default = 1];
  if (has_lr_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(112, this->lr_beta(), target);
  }

  // optional int32 num_threads = 121 [default = 2];
  if (has_num_threads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(121, this->num_threads(), target);
  }

  // optional int32 max_concurrency = 122 [default = 2];
  if (has_max_concurrency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(122, this->max_concurrency(), target);
  }

  // optional bool key_cache = 123 [default = true];
  if (has_key_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(123, this->key_cache(), target);
  }

  // optional bool msg_compression = 124 [default = true];
  if (has_msg_compression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(124, this->msg_compression(), target);
  }

  // optional int32 fixed_bytes = 125 [default = 0];
  if (has_fixed_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(125, this->fixed_bytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Config::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string train_data = 1;
    if (has_train_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_data());
    }

    // optional string val_data = 2;
    if (has_val_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val_data());
    }

    // optional string data_format = 4 [default = "libsvm"];
    if (has_data_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_format());
    }

    // optional string model_out = 5;
    if (has_model_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_out());
    }

    // optional string model_in = 7;
    if (has_model_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_in());
    }

    // optional string predict_out = 9;
    if (has_predict_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_out());
    }

    // optional .dmlc.linear.Config.Loss loss = 11 [default = LOGIT];
    if (has_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->loss());
    }

    // optional float lambda_l1 = 12 [default = 1];
    if (has_lambda_l1()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float lambda_l2 = 13 [default = 0];
    if (has_lambda_l2()) {
      total_size += 1 + 4;
    }

    // optional .dmlc.linear.Config.Algo algo = 21 [default = FTRL];
    if (has_algo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->algo());
    }

    // optional int32 minibatch = 22 [default = 1000];
    if (has_minibatch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minibatch());
    }

    // optional int32 max_data_pass = 23 [default = 10];
    if (has_max_data_pass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_data_pass());
    }

    // optional float lr_eta = 24 [default = 0.01];
    if (has_lr_eta()) {
      total_size += 2 + 4;
    }

    // optional int32 save_iter = 6 [default = -1];
    if (has_save_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->save_iter());
    }

    // optional int32 load_iter = 8 [default = -1];
    if (has_load_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->load_iter());
    }

    // optional bool local_data = 101 [default = false];
    if (has_local_data()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 num_parts_per_file = 102 [default = 10];
    if (has_num_parts_per_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_parts_per_file());
    }

    // optional int32 rand_shuffle = 103 [default = 10];
    if (has_rand_shuffle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rand_shuffle());
    }

    // optional float neg_sampling = 104 [default = 1];
    if (has_neg_sampling()) {
      total_size += 2 + 4;
    }

    // optional bool prob_predict = 105 [default = true];
    if (has_prob_predict()) {
      total_size += 2 + 1;
    }

    // optional float dropout = 110 [default = 0];
    if (has_dropout()) {
      total_size += 2 + 4;
    }

    // optional float print_sec = 111 [default = 1];
    if (has_print_sec()) {
      total_size += 2 + 4;
    }

    // optional float lr_beta = 112 [default = 1];
    if (has_lr_beta()) {
      total_size += 2 + 4;
    }

    // optional int32 num_threads = 121 [default = 2];
    if (has_num_threads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_threads());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 max_concurrency = 122 [default = 2];
    if (has_max_concurrency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_concurrency());
    }

    // optional bool key_cache = 123 [default = true];
    if (has_key_cache()) {
      total_size += 2 + 1;
    }

    // optional bool msg_compression = 124 [default = true];
    if (has_msg_compression()) {
      total_size += 2 + 1;
    }

    // optional int32 fixed_bytes = 125 [default = 0];
    if (has_fixed_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixed_bytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Config* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Config*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train_data()) {
      set_train_data(from.train_data());
    }
    if (from.has_val_data()) {
      set_val_data(from.val_data());
    }
    if (from.has_data_format()) {
      set_data_format(from.data_format());
    }
    if (from.has_model_out()) {
      set_model_out(from.model_out());
    }
    if (from.has_model_in()) {
      set_model_in(from.model_in());
    }
    if (from.has_predict_out()) {
      set_predict_out(from.predict_out());
    }
    if (from.has_loss()) {
      set_loss(from.loss());
    }
    if (from.has_lambda_l1()) {
      set_lambda_l1(from.lambda_l1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lambda_l2()) {
      set_lambda_l2(from.lambda_l2());
    }
    if (from.has_algo()) {
      set_algo(from.algo());
    }
    if (from.has_minibatch()) {
      set_minibatch(from.minibatch());
    }
    if (from.has_max_data_pass()) {
      set_max_data_pass(from.max_data_pass());
    }
    if (from.has_lr_eta()) {
      set_lr_eta(from.lr_eta());
    }
    if (from.has_save_iter()) {
      set_save_iter(from.save_iter());
    }
    if (from.has_load_iter()) {
      set_load_iter(from.load_iter());
    }
    if (from.has_local_data()) {
      set_local_data(from.local_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_num_parts_per_file()) {
      set_num_parts_per_file(from.num_parts_per_file());
    }
    if (from.has_rand_shuffle()) {
      set_rand_shuffle(from.rand_shuffle());
    }
    if (from.has_neg_sampling()) {
      set_neg_sampling(from.neg_sampling());
    }
    if (from.has_prob_predict()) {
      set_prob_predict(from.prob_predict());
    }
    if (from.has_dropout()) {
      set_dropout(from.dropout());
    }
    if (from.has_print_sec()) {
      set_print_sec(from.print_sec());
    }
    if (from.has_lr_beta()) {
      set_lr_beta(from.lr_beta());
    }
    if (from.has_num_threads()) {
      set_num_threads(from.num_threads());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_max_concurrency()) {
      set_max_concurrency(from.max_concurrency());
    }
    if (from.has_key_cache()) {
      set_key_cache(from.key_cache());
    }
    if (from.has_msg_compression()) {
      set_msg_compression(from.msg_compression());
    }
    if (from.has_fixed_bytes()) {
      set_fixed_bytes(from.fixed_bytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {

  return true;
}

void Config::Swap(Config* other) {
  if (other != this) {
    std::swap(train_data_, other->train_data_);
    std::swap(val_data_, other->val_data_);
    std::swap(data_format_, other->data_format_);
    std::swap(model_out_, other->model_out_);
    std::swap(model_in_, other->model_in_);
    std::swap(predict_out_, other->predict_out_);
    std::swap(loss_, other->loss_);
    std::swap(lambda_l1_, other->lambda_l1_);
    std::swap(lambda_l2_, other->lambda_l2_);
    std::swap(algo_, other->algo_);
    std::swap(minibatch_, other->minibatch_);
    std::swap(max_data_pass_, other->max_data_pass_);
    std::swap(lr_eta_, other->lr_eta_);
    std::swap(save_iter_, other->save_iter_);
    std::swap(load_iter_, other->load_iter_);
    std::swap(local_data_, other->local_data_);
    std::swap(num_parts_per_file_, other->num_parts_per_file_);
    std::swap(rand_shuffle_, other->rand_shuffle_);
    std::swap(neg_sampling_, other->neg_sampling_);
    std::swap(prob_predict_, other->prob_predict_);
    std::swap(dropout_, other->dropout_);
    std::swap(print_sec_, other->print_sec_);
    std::swap(lr_beta_, other->lr_beta_);
    std::swap(num_threads_, other->num_threads_);
    std::swap(max_concurrency_, other->max_concurrency_);
    std::swap(key_cache_, other->key_cache_);
    std::swap(msg_compression_, other->msg_compression_);
    std::swap(fixed_bytes_, other->fixed_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Config_descriptor_;
  metadata.reflection = Config_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace linear
}  // namespace dmlc

// @@protoc_insertion_point(global_scope)
